From 79af125a89ca2b32a2fff457f32cafc655bf5573 Mon Sep 17 00:00:00 2001
From: dpslwk <dps.lwk@gmail.com>
Date: Thu, 10 Jan 2019 19:56:55 +0000
Subject: [PATCH] head

---
 config.m4         |   2 +
 gssapi.c          |   5 +-
 kadm5_principal.c |   1 -
 krb5.c            |  47 ++++++++++++++
 negotiate_auth.c  | 152 +++++++++++++++++++++++++++++++---------------
 php_krb5.h        |   4 ++
 6 files changed, 160 insertions(+), 51 deletions(-)

diff --git a/config.m4 b/config.m4
index c11028a..227b107 100644
--- a/config.m4
+++ b/config.m4
@@ -61,8 +61,10 @@ if test "$PHP_KRB5" != "no" -o "$PHP_KRB5KADM" != "no"; then
 	LDFLAGS="${LDFLAGS} ${KRB5_LDFLAGS}"
 
 	AC_CHECK_FUNCS(krb5_free_string)
+	AC_CHECK_FUNCS(gss_acquire_cred_from)
 	AC_CHECK_FUNCS(krb5_chpw_message)
 	AC_CHECK_FUNCS(krb5_principal_get_realm)
+	AC_CHECK_FUNCS(krb5_get_init_creds_opt_set_expire_callback)
 
 	PHP_SUBST(CFLAGS)
 	PHP_SUBST(LDFLAGS)
diff --git a/gssapi.c b/gssapi.c
index 22d578b..4cc66ce 100644
--- a/gssapi.c
+++ b/gssapi.c
@@ -612,8 +612,9 @@ PHP_METHOD(GSSAPIContext, initSecContext)
 	if(status & GSS_S_CONTINUE_NEEDED) {
 		RETVAL_FALSE;
 	} else if(status) {
-		gss_release_name(&minor_status, &targetname);
-		gss_release_buffer(&minor_status, &tokenbuf);
+		OM_uint32 tmpstat = 0;
+		gss_release_name(&tmpstat, &targetname);
+		gss_release_buffer(&tmpstat, &tokenbuf);
 		ASSERT_GSS_SUCCESS(status,minor_status,);
 	} else {
 		RETVAL_TRUE;
diff --git a/kadm5_principal.c b/kadm5_principal.c
index ed733c6..0692a8f 100644
--- a/kadm5_principal.c
+++ b/kadm5_principal.c
@@ -289,7 +289,6 @@ PHP_METHOD(KADM5Principal, load)
 	}
 
 	zend_string *pnstr = zval_get_string(princname TSRMLS_CC);
-	fprintf(stderr, "Loading %s\n", pnstr->val);
 	if(krb5_parse_name(kadm5->ctx, pnstr->val, &obj->data.principal)) {
 		zend_string_release(pnstr);
 		zend_throw_exception(NULL, "Failed to parse principal name", 0 TSRMLS_CC);
diff --git a/krb5.c b/krb5.c
index 0f75559..4222164 100644
--- a/krb5.c
+++ b/krb5.c
@@ -99,6 +99,7 @@ PHP_METHOD(KRB5CCache, save);
 PHP_METHOD(KRB5CCache, isValid);
 PHP_METHOD(KRB5CCache, getTktAttrs);
 PHP_METHOD(KRB5CCache, renew);
+PHP_METHOD(KRB5CCache, getExpirationTime);
 
 static zend_function_entry krb5_ccache_functions[] = {
 		PHP_ME(KRB5CCache, initPassword, arginfo_KRB5CCache_initPassword, ZEND_ACC_PUBLIC)
@@ -114,6 +115,7 @@ static zend_function_entry krb5_ccache_functions[] = {
 		PHP_ME(KRB5CCache, isValid,      arginfo_KRB5CCache_isValid,      ZEND_ACC_PUBLIC)
 		PHP_ME(KRB5CCache, getTktAttrs,  arginfo_KRB5CCache_getTktAttrs,  ZEND_ACC_PUBLIC)
 		PHP_ME(KRB5CCache, renew,        arginfo_KRB5CCache_none,         ZEND_ACC_PUBLIC)
+		PHP_ME(KRB5CCache, getExpirationTime,arginfo_KRB5CCache_none,     ZEND_ACC_PUBLIC)
 		PHP_FE_END
 };
 
@@ -185,6 +187,8 @@ PHP_MINIT_FUNCTION(krb5)
 	REGISTER_LONG_CONSTANT("GSS_C_BOTH", GSS_C_BOTH, CONST_CS | CONST_PERSISTENT );
 	REGISTER_LONG_CONSTANT("GSS_C_INITIATE", GSS_C_INITIATE, CONST_CS | CONST_PERSISTENT );
 	REGISTER_LONG_CONSTANT("GSS_C_ACCEPT", GSS_C_ACCEPT, CONST_CS | CONST_PERSISTENT );
+
+	REGISTER_LONG_CONSTANT("GSS_C_NO_NAME", 0, CONST_CS | CONST_PERSISTENT );
 	
 #ifdef KRB5_TL_DB_ARGS
 	REGISTER_LONG_CONSTANT("KRB5_TL_DB_ARGS", KRB5_TL_DB_ARGS, CONST_CS | CONST_PERSISTENT );
@@ -234,6 +238,12 @@ PHP_MINFO_FUNCTION(krb5)
 	php_info_print_table_row(2, "KADM5 support", "no");
 #endif
 
+#if HAVE_GSS_KRB5_IMPORT_CRED
+	php_info_print_table_row(2, "Import cred support", "yes");
+#else
+	php_info_print_table_row(2, "Import cred support", "no");
+#endif
+
 	php_info_print_table_row(2, "GSSAPI/SPNEGO auth support", "yes");
 	php_info_print_table_end();
 }
@@ -632,6 +642,17 @@ static krb5_error_code php_krb5_verify_tgt(krb5_ccache_object *ccache, krb5_cred
 }
 /* }}} */
 
+#ifdef HAVE_KRB5_GET_INIT_CREDS_OPT_SET_EXPIRE_CALLBACK
+/* {{{ received and store password and account expiration times */
+void expire_callback_func(krb5_context context, void *data, krb5_timestamp password_expiration, krb5_timestamp account_expiration, krb5_boolean is_last_req) {
+    krb5_ccache_object *ccache = (krb5_ccache_object *) data;
+    ccache->exp_received = TRUE;
+    ccache->exp_password = password_expiration;
+    ccache->exp_account = account_expiration;
+    ccache->exp_is_last_req = is_last_req;
+}
+#endif
+/* }}} */
 
 /* KRB5CCache Methods */
 
@@ -780,6 +801,13 @@ PHP_METHOD(KRB5CCache, initPassword)
 		}
 	}
 
+#ifdef HAVE_KRB5_GET_INIT_CREDS_OPT_SET_EXPIRE_CALLBACK
+	krb5_get_init_creds_opt_set_expire_callback(ccache->ctx,
+			cred_opts,
+			expire_callback_func,
+			ccache);
+#endif
+
 	memset(&creds, 0, sizeof(creds));
 	if ((retval = krb5_get_init_creds_password(ccache->ctx, &creds, princ, spass, NULL, 0, 0, in_tkt_svc, cred_opts))) {
 		errstr = "Cannot get ticket (%s)";
@@ -1518,4 +1546,23 @@ PHP_METHOD(KRB5CCache, changePassword)
 }
 /* }}} */
 
+/* {{{ proto array KRB5CCache::getExpirationTime( )
+   Return array with password and account expiry times */
+PHP_METHOD(KRB5CCache, getExpirationTime)
+{
+	krb5_ccache_object *ccache = KRB5_THIS_CCACHE;
+
+	if (zend_parse_parameters_none() == FAILURE) {
+		zend_throw_exception(NULL, "Failed to parse arglist", 0 TSRMLS_CC);
+		RETURN_FALSE;
+	}
+
+	array_init(return_value);
+	add_assoc_bool(return_value, "received", ccache->exp_received);
+	add_assoc_long(return_value, "password_expiration", ccache->exp_password);
+	add_assoc_long(return_value, "account_expiration", ccache->exp_account);
+	add_assoc_bool(return_value, "is_last_req", ccache->exp_is_last_req);
+}
+/* }}} */
+
 /* bottom of file */
diff --git a/negotiate_auth.c b/negotiate_auth.c
index 37449bf..e5f5f89 100644
--- a/negotiate_auth.c
+++ b/negotiate_auth.c
@@ -23,6 +23,7 @@
 #include "php_krb5.h"
 #include "php_krb5_gssapi.h"
 #include "compat.h"
+#include "config.h"
 #include "SAPI.h"
 #include "ext/standard/base64.h"
 #include <math.h>
@@ -40,12 +41,16 @@ typedef struct _krb5_negotiate_auth_object {
 	gss_name_t servname;
 	gss_name_t authed_user;
 	gss_cred_id_t delegated;
+#ifdef HAVE_GSS_ACQUIRE_CRED_FROM
+	gss_key_value_set_desc cred_store;
+#endif
 #if PHP_MAJOR_VERSION >= 7
 	zend_object std;
 #endif
 } krb5_negotiate_auth_object;
 
 
+
 #if PHP_MAJOR_VERSION < 7
 static void php_krb5_negotiate_auth_object_dtor(void *obj, zend_object_handle handle TSRMLS_DC);
 zend_object_value php_krb5_negotiate_auth_object_new(zend_class_entry *ce TSRMLS_DC);
@@ -59,6 +64,7 @@ ZEND_END_ARG_INFO()
 
 ZEND_BEGIN_ARG_INFO_EX(arginfo_KRB5NegotiateAuth__construct, 0, 0, 1)
 	ZEND_ARG_INFO(0, keytab)
+	ZEND_ARG_INFO(0, spn)
 ZEND_END_ARG_INFO()
 
 ZEND_BEGIN_ARG_INFO_EX(arginfo_KRB5NegotiateAuth_getDelegatedCredentials, 0, 0, 1)
@@ -80,19 +86,13 @@ static zend_function_entry krb5_negotiate_auth_functions[] = {
 
 
 /** Registration **/
-/* {{{ */
-#if PHP_MAJOR_VERSION < 7
-static void php_krb5_negotiate_auth_object_dtor(void *obj, zend_object_handle handle TSRMLS_DC)
-{
-	krb5_negotiate_auth_object *object = (krb5_negotiate_auth_object*)obj;
-	OM_uint32 minor_status = 0;
 
-	OBJECT_STD_DTOR(object->std);
+static void php_krb5_negotiate_auth_object_free_data(krb5_negotiate_auth_object* object) {
+	OM_uint32 minor_status = 0;
 
 	if ( object->servname ) {
 		free(object->servname);
 	}
-
 	if ( object->delegated != GSS_C_NO_CREDENTIAL ) {
 		gss_release_cred(&minor_status, &object->delegated);
 	}
@@ -100,30 +100,36 @@ static void php_krb5_negotiate_auth_object_dtor(void *obj, zend_object_handle ha
 	if ( object->authed_user != GSS_C_NO_NAME ) {
 		gss_release_name(&minor_status, &object->authed_user);
 	}
+
+#ifdef HAVE_GSS_ACQUIRE_CRED_FROM
+	if ( object->cred_store.elements != NULL ) {
+		efree((void*)object->cred_store.elements->value);
+		efree(object->cred_store.elements);
+	}
+#endif
+}
+/* {{{ */
+#if PHP_MAJOR_VERSION < 7
+static void php_krb5_negotiate_auth_object_dtor(void *obj, zend_object_handle handle TSRMLS_DC)
+{
+	krb5_negotiate_auth_object *object = (krb5_negotiate_auth_object*)obj;
+	OBJECT_STD_DTOR(object->std);
+	php_krb5_negotiate_auth_object_free_data(object);
 	efree(object);
 } 
 #else
 static void php_krb5_negotiate_auth_object_free(zend_object *obj TSRMLS_DC)
 {
 	krb5_negotiate_auth_object *object = (krb5_negotiate_auth_object*)((char *)obj - XtOffsetOf(krb5_negotiate_auth_object, std));
-	OM_uint32 minor_status = 0;
-
-	if ( object->servname ) {
-		free(object->servname);
-	}
-	if ( object->delegated != GSS_C_NO_CREDENTIAL ) {
-		gss_release_cred(&minor_status, &object->delegated);
-	}
-
-	if ( object->authed_user != GSS_C_NO_NAME ) {
-		gss_release_name(&minor_status, &object->authed_user);
-	}
+	php_krb5_negotiate_auth_object_free_data(object);
 	zend_object_std_dtor(obj);
 } 
 #endif
 /* }}} */
 
 
+
+
 static void setup_negotiate_auth(krb5_negotiate_auth_object *object TSRMLS_DC) {
 	object->authed_user = GSS_C_NO_NAME;
 	object->servname = GSS_C_NO_NAME;
@@ -190,62 +196,98 @@ int php_krb5_negotiate_auth_register_classes(TSRMLS_D) {
 
 
 /** KRB5NegotiateAuth Methods **/
-/* {{{ proto bool KRB5NegotiateAuth::__construct( string $keytab )
+/* {{{ proto bool KRB5NegotiateAuth::__construct( string $keytab [, string $spn ] )
    Initialize KRB5NegotitateAuth object with a keytab to use  */
 PHP_METHOD(KRB5NegotiateAuth, __construct)
 {
-	gss_buffer_desc nametmp;
+
 	OM_uint32 status, minor_status;
 	krb5_negotiate_auth_object *object;
 	char *keytab;
+	zval *spn = NULL;
+	gss_buffer_desc nametmp;
 	strsize_t keytab_len = 0;
 
 	KRB5_SET_ERROR_HANDLING(EH_THROW);
-	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ARG_PATH, &keytab, &keytab_len) == FAILURE) {
+	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ARG_PATH "|z", &keytab, &keytab_len, &spn) == FAILURE) {
 		RETURN_FALSE;
 	}
 	KRB5_SET_ERROR_HANDLING(EH_NORMAL);
 
 	object = KRB5_THIS_NEGOTIATE_AUTH;
 
-	/* lookup server's FQDN */
-	zval *server, *server_name;
-	server = zend_compat_hash_find(&EG(symbol_table), "_SERVER", sizeof("_SERVER"));
-	if ( server != NULL ) {
-		server_name = zend_compat_hash_find(HASH_OF(server), "SERVER_NAME", sizeof("SERVER_NAME"));
-		if ( server_name != NULL ) {
-			char *hostname = Z_STRVAL_P(server_name);
-			struct hostent* host = gethostbyname(hostname);
-
-			if(!host) {
-				zend_throw_exception(NULL, "Failed to get server FQDN - Lookup failure", 0 TSRMLS_CC);
-				return;
-			}
-
-			nametmp.length = strlen(host->h_name) + 6;
-			nametmp.value = emalloc(sizeof(char)*nametmp.length);
-			snprintf(nametmp.value, nametmp.length, "HTTP@%s",host->h_name);
 
-			status = gss_import_name(&minor_status, &nametmp,
-							GSS_C_NT_HOSTBASED_SERVICE, &object->servname);
+#ifdef HAVE_GSS_ACQUIRE_CRED_FROM
+	char *kt_name = estrdup(keytab);
+	gss_key_value_element_desc *keytab_element = emalloc(sizeof(gss_key_value_element_desc));
+	keytab_element->key = "keytab";
+	keytab_element->value = kt_name;
+	object->cred_store.elements = keytab_element;
+	object->cred_store.count = 1;
+#endif
 
-			if(GSS_ERROR(status)) {
-				php_krb5_gssapi_handle_error(status, minor_status TSRMLS_CC);
-				zend_throw_exception(NULL, "Could not parse server name", 0 TSRMLS_CC);
+	if ( spn != NULL && Z_TYPE_P((spn))==IS_LONG && zval_get_long(spn TSRMLS_CC) == 0) {
+		object->servname = GSS_C_NO_NAME;
+	}
+	else if ( spn == NULL ) {
+		/** legacy behavior - try to find canonical server FQDN **/
+		zval *server, *server_name;
+		server = zend_compat_hash_find(&EG(symbol_table), "_SERVER", sizeof("_SERVER"));
+		if ( server != NULL ) {
+			server_name = zend_compat_hash_find(HASH_OF(server), "SERVER_NAME", sizeof("SERVER_NAME"));
+			if ( server_name != NULL ) {
+				char *hostname = Z_STRVAL_P(server_name);
+				struct hostent* host = gethostbyname(hostname);
+
+				if(!host) {
+					zend_throw_exception(NULL, "Failed to get server FQDN - Lookup failure", 0 TSRMLS_CC);
+					return;
+				}
+
+
+
+				nametmp.length = strlen(host->h_name) + 6;
+				nametmp.value = emalloc(sizeof(char)*nametmp.length);
+				snprintf(nametmp.value, nametmp.length, "HTTP@%s",host->h_name);
+
+				status = gss_import_name(&minor_status, &nametmp,
+								GSS_C_NT_HOSTBASED_SERVICE, &object->servname);
+
+				if(GSS_ERROR(status)) {
+					php_krb5_gssapi_handle_error(status, minor_status TSRMLS_CC);
+					zend_throw_exception(NULL, "Could not parse server name", 0 TSRMLS_CC);
+					return;
+				}
+
+				efree(nametmp.value);
+			} else {
+				zend_throw_exception(NULL, "Failed to get server FQDN", 0 TSRMLS_CC);
 				return;
 			}
+		}
+	} else {
+		zend_string *spnstr = zval_get_string(spn TSRMLS_CC);
+		nametmp.length = spnstr->len;
+		nametmp.value = spnstr->val;
 
-			efree(nametmp.value);
-		} else {
-			zend_throw_exception(NULL, "Failed to get server FQDN", 0 TSRMLS_CC);
+		status = gss_import_name(&minor_status, &nametmp,
+						(gss_OID)GSS_KRB5_NT_PRINCIPAL_NAME, &object->servname);
+
+		zend_string_free(spnstr);
+
+		if(GSS_ERROR(status)) {
+			php_krb5_gssapi_handle_error(status, minor_status TSRMLS_CC);
+			zend_throw_exception(NULL, "Could not parse server name", 0 TSRMLS_CC);
 			return;
 		}
 	}
 
+#ifndef HAVE_GSS_ACQUIRE_CRED_FROM
 	if(krb5_gss_register_acceptor_identity(keytab) != GSS_S_COMPLETE) {
 		zend_throw_exception(NULL, "Failed to use credential cache", 0 TSRMLS_CC);
 		return;
 	}
+#endif
 } /* }}} */
 
 /* {{{ proto bool KRB5NegotiateAuth::doAuthentication(  )
@@ -320,6 +362,19 @@ PHP_METHOD(KRB5NegotiateAuth, doAuthentication)
 		return;
 	}
 
+
+#ifdef HAVE_GSS_ACQUIRE_CRED_FROM
+	status = gss_acquire_cred_from(&minor_status,
+					object->servname,
+					0,
+					GSS_C_NO_OID_SET,
+					GSS_C_ACCEPT,
+					&object->cred_store,
+					&server_creds,
+					NULL,
+					NULL);
+	
+#else
 	status = gss_acquire_cred(&minor_status,
 			object->servname,
 			0,
@@ -328,6 +383,7 @@ PHP_METHOD(KRB5NegotiateAuth, doAuthentication)
 			&server_creds,
 			NULL,
 			NULL);
+#endif
 
 	if(GSS_ERROR(status)) {
 		zend_string_release(token);
diff --git a/php_krb5.h b/php_krb5.h
index 39845ac..188735f 100644
--- a/php_krb5.h
+++ b/php_krb5.h
@@ -70,6 +70,10 @@ typedef struct _krb5_ccache_object {
 	krb5_context ctx;
 	krb5_ccache cc;
 	char *keytab;
+	krb5_boolean exp_received;
+	krb5_timestamp exp_password;
+	krb5_timestamp exp_account;
+	krb5_boolean exp_is_last_req;
 #if PHP_MAJOR_VERSION >= 7
 	zend_object std;
 #endif
-- 
2.17.1

